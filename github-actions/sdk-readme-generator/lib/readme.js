"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateReadmeStringFromTemplateString = exports.generateReadmeFileFromTemplateFile = void 0;
const nunjucks = require("nunjucks");
const fs = require("fs");
const markdownlint = require("markdownlint");
const rule_must_begin_with_oss_header_1 = require("./markdownlint-rules/rule-must-begin-with-oss-header");
function generateReadmeFileFromTemplateFile(options) {
    const templateContents = fs.readFileSync(options.templateFile).toString();
    const outputContents = generateReadmeStringFromTemplateString({
        templateContents: templateContents,
        projectStatus: options.projectStatus,
        projectStability: options.projectStability,
    });
    fs.writeFileSync(options.outputFile, outputContents);
}
exports.generateReadmeFileFromTemplateFile = generateReadmeFileFromTemplateFile;
const OSS_README_HEADER_TEMPLATE = `<img src="https://docs.momentohq.com/img/logo.svg" alt="logo" width="400"/>
[![project status](https://momentohq.github.io/standards-and-practices/project-status-official.svg)](https://github.com/momentohq/standards-and-practices/momento-on-github.md)
[![project status](https://momentohq.github.io/standards-and-practices/project-status-official.svg)](https://github.com/momentohq/standards-and-practices/momento-on-github.md) 
`;
function generateReadmeStringFromTemplateString(options) {
    // markdownlint.
    // const customMarkdownLintRule: markdownlint.Rule = {
    //   names: ['awesome-custom-rule'],
    //   description: 'content must be awesome',
    //   tags: ['momento-oss'],
    //   function: (params, onError) => {
    //     console.log(`IN CUSTOM MARKDOWNLINT RULE; params.name: ${params.name}`);
    //     for (const token of params.tokens) {
    //       console.log(`MARKDOWN TOKEN: ${JSON.stringify(token)}`);
    //     }
    //   },
    // };
    const markdownLintOptions = {
        config: {
            default: true,
            'no-trailing-spaces': false,
            'first-line-heading': false,
        },
        customRules: [rule_must_begin_with_oss_header_1.mustBeginWithOssHeader],
        strings: { README_template: options.templateContents },
    };
    const lintResults = markdownlint.sync(markdownLintOptions);
    console.log(`LINT RESULTS: ${JSON.stringify(lintResults, null, 2)}`);
    const lintErrors = lintResults['README_template'];
    if (lintErrors.length > 0) {
        throw new Error(`README template does not conform to Momento OSS requirements:\n${lintErrors
            .map(le => JSON.stringify(le))
            .join('\n')}`);
    }
    // TODO: render
    const ossHeader = OSS_README_HEADER_TEMPLATE;
    nunjucks.configure({ autoescape: false });
    const templateContext = {
        ossHeader: ossHeader,
    };
    return nunjucks.renderString(options.templateContents, templateContext);
}
exports.generateReadmeStringFromTemplateString = generateReadmeStringFromTemplateString;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZG1lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3JlYWRtZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBcUM7QUFDckMseUJBQXlCO0FBQ3pCLDZDQUE2QztBQUc3QywwR0FBNEY7QUFTNUYsU0FBZ0Isa0NBQWtDLENBQ2hELE9BQW1DO0lBRW5DLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDMUUsTUFBTSxjQUFjLEdBQUcsc0NBQXNDLENBQUM7UUFDNUQsZ0JBQWdCLEVBQUUsZ0JBQWdCO1FBQ2xDLGFBQWEsRUFBRSxPQUFPLENBQUMsYUFBYTtRQUNwQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsZ0JBQWdCO0tBQzNDLENBQUMsQ0FBQztJQUNILEVBQUUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQztBQUN2RCxDQUFDO0FBVkQsZ0ZBVUM7QUFhRCxNQUFNLDBCQUEwQixHQUFHOzs7Q0FHbEMsQ0FBQztBQU1GLFNBQWdCLHNDQUFzQyxDQUNwRCxPQUFxQztJQUVyQyxnQkFBZ0I7SUFDaEIsc0RBQXNEO0lBQ3RELG9DQUFvQztJQUNwQyw0Q0FBNEM7SUFDNUMsMkJBQTJCO0lBQzNCLHFDQUFxQztJQUNyQywrRUFBK0U7SUFDL0UsMkNBQTJDO0lBQzNDLGlFQUFpRTtJQUNqRSxRQUFRO0lBQ1IsT0FBTztJQUNQLEtBQUs7SUFDTCxNQUFNLG1CQUFtQixHQUF3QjtRQUMvQyxNQUFNLEVBQUU7WUFDTixPQUFPLEVBQUUsSUFBSTtZQUNiLG9CQUFvQixFQUFFLEtBQUs7WUFDM0Isb0JBQW9CLEVBQUUsS0FBSztTQUM1QjtRQUNELFdBQVcsRUFBRSxDQUFDLHdEQUFzQixDQUFDO1FBQ3JDLE9BQU8sRUFBRSxFQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsZ0JBQWdCLEVBQUM7S0FDckQsQ0FBQztJQUNGLE1BQU0sV0FBVyxHQUNmLFlBQVksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUN6QyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3JFLE1BQU0sVUFBVSxHQUNkLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ2pDLElBQUksVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDekIsTUFBTSxJQUFJLEtBQUssQ0FDYixrRUFBa0UsVUFBVTthQUN6RSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUNoQixDQUFDO0tBQ0g7SUFFRCxlQUFlO0lBQ2YsTUFBTSxTQUFTLEdBQUcsMEJBQTBCLENBQUM7SUFFN0MsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFDLFVBQVUsRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDO0lBQ3hDLE1BQU0sZUFBZSxHQUEwQjtRQUM3QyxTQUFTLEVBQUUsU0FBUztLQUNyQixDQUFDO0lBQ0YsT0FBTyxRQUFRLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUMxRSxDQUFDO0FBN0NELHdGQTZDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG51bmp1Y2tzIGZyb20gJ251bmp1Y2tzJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIG1hcmtkb3dubGludCBmcm9tICdtYXJrZG93bmxpbnQnO1xuaW1wb3J0IHtMaW50UmVzdWx0cywgT3B0aW9ucyBhcyBNYXJrZG93bkxpbnRPcHRpb25zfSBmcm9tICdtYXJrZG93bmxpbnQnO1xuaW1wb3J0IHtQcm9qZWN0U3RhYmlsaXR5LCBQcm9qZWN0U3RhdHVzfSBmcm9tICcuL2lucHV0cyc7XG5pbXBvcnQge211c3RCZWdpbldpdGhPc3NIZWFkZXJ9IGZyb20gJy4vbWFya2Rvd25saW50LXJ1bGVzL3J1bGUtbXVzdC1iZWdpbi13aXRoLW9zcy1oZWFkZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlYWRtZUZpbGVHZW5lcmF0b3JPcHRpb25zIHtcbiAgdGVtcGxhdGVGaWxlOiBzdHJpbmc7XG4gIG91dHB1dEZpbGU6IHN0cmluZztcbiAgcHJvamVjdFN0YXR1czogUHJvamVjdFN0YXR1cztcbiAgcHJvamVjdFN0YWJpbGl0eTogUHJvamVjdFN0YWJpbGl0eTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUmVhZG1lRmlsZUZyb21UZW1wbGF0ZUZpbGUoXG4gIG9wdGlvbnM6IFJlYWRtZUZpbGVHZW5lcmF0b3JPcHRpb25zXG4pOiB2b2lkIHtcbiAgY29uc3QgdGVtcGxhdGVDb250ZW50cyA9IGZzLnJlYWRGaWxlU3luYyhvcHRpb25zLnRlbXBsYXRlRmlsZSkudG9TdHJpbmcoKTtcbiAgY29uc3Qgb3V0cHV0Q29udGVudHMgPSBnZW5lcmF0ZVJlYWRtZVN0cmluZ0Zyb21UZW1wbGF0ZVN0cmluZyh7XG4gICAgdGVtcGxhdGVDb250ZW50czogdGVtcGxhdGVDb250ZW50cyxcbiAgICBwcm9qZWN0U3RhdHVzOiBvcHRpb25zLnByb2plY3RTdGF0dXMsXG4gICAgcHJvamVjdFN0YWJpbGl0eTogb3B0aW9ucy5wcm9qZWN0U3RhYmlsaXR5LFxuICB9KTtcbiAgZnMud3JpdGVGaWxlU3luYyhvcHRpb25zLm91dHB1dEZpbGUsIG91dHB1dENvbnRlbnRzKTtcbn1cblxuaW50ZXJmYWNlIFJlYWRtZVN0cmluZ0dlbmVyYXRvck9wdGlvbnMge1xuICB0ZW1wbGF0ZUNvbnRlbnRzOiBzdHJpbmc7XG4gIHByb2plY3RTdGF0dXM6IFByb2plY3RTdGF0dXM7XG4gIHByb2plY3RTdGFiaWxpdHk6IFByb2plY3RTdGFiaWxpdHk7XG59XG5cbmludGVyZmFjZSBIZWFkZXJUZW1wbGF0ZUNvbnRleHQge1xuICBwcm9qZWN0U3RhdHVzOiBzdHJpbmc7XG4gIHByb2plY3RTdGFiaWxpdHk6IHN0cmluZztcbn1cblxuY29uc3QgT1NTX1JFQURNRV9IRUFERVJfVEVNUExBVEUgPSBgPGltZyBzcmM9XCJodHRwczovL2RvY3MubW9tZW50b2hxLmNvbS9pbWcvbG9nby5zdmdcIiBhbHQ9XCJsb2dvXCIgd2lkdGg9XCI0MDBcIi8+XG5bIVtwcm9qZWN0IHN0YXR1c10oaHR0cHM6Ly9tb21lbnRvaHEuZ2l0aHViLmlvL3N0YW5kYXJkcy1hbmQtcHJhY3RpY2VzL3Byb2plY3Qtc3RhdHVzLW9mZmljaWFsLnN2ZyldKGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnRvaHEvc3RhbmRhcmRzLWFuZC1wcmFjdGljZXMvbW9tZW50by1vbi1naXRodWIubWQpXG5bIVtwcm9qZWN0IHN0YXR1c10oaHR0cHM6Ly9tb21lbnRvaHEuZ2l0aHViLmlvL3N0YW5kYXJkcy1hbmQtcHJhY3RpY2VzL3Byb2plY3Qtc3RhdHVzLW9mZmljaWFsLnN2ZyldKGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnRvaHEvc3RhbmRhcmRzLWFuZC1wcmFjdGljZXMvbW9tZW50by1vbi1naXRodWIubWQpIFxuYDtcblxuaW50ZXJmYWNlIFJlYWRtZVRlbXBsYXRlQ29udGV4dCB7XG4gIG9zc0hlYWRlcjogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVSZWFkbWVTdHJpbmdGcm9tVGVtcGxhdGVTdHJpbmcoXG4gIG9wdGlvbnM6IFJlYWRtZVN0cmluZ0dlbmVyYXRvck9wdGlvbnNcbik6IHN0cmluZyB7XG4gIC8vIG1hcmtkb3dubGludC5cbiAgLy8gY29uc3QgY3VzdG9tTWFya2Rvd25MaW50UnVsZTogbWFya2Rvd25saW50LlJ1bGUgPSB7XG4gIC8vICAgbmFtZXM6IFsnYXdlc29tZS1jdXN0b20tcnVsZSddLFxuICAvLyAgIGRlc2NyaXB0aW9uOiAnY29udGVudCBtdXN0IGJlIGF3ZXNvbWUnLFxuICAvLyAgIHRhZ3M6IFsnbW9tZW50by1vc3MnXSxcbiAgLy8gICBmdW5jdGlvbjogKHBhcmFtcywgb25FcnJvcikgPT4ge1xuICAvLyAgICAgY29uc29sZS5sb2coYElOIENVU1RPTSBNQVJLRE9XTkxJTlQgUlVMRTsgcGFyYW1zLm5hbWU6ICR7cGFyYW1zLm5hbWV9YCk7XG4gIC8vICAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHBhcmFtcy50b2tlbnMpIHtcbiAgLy8gICAgICAgY29uc29sZS5sb2coYE1BUktET1dOIFRPS0VOOiAke0pTT04uc3RyaW5naWZ5KHRva2VuKX1gKTtcbiAgLy8gICAgIH1cbiAgLy8gICB9LFxuICAvLyB9O1xuICBjb25zdCBtYXJrZG93bkxpbnRPcHRpb25zOiBNYXJrZG93bkxpbnRPcHRpb25zID0ge1xuICAgIGNvbmZpZzoge1xuICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICduby10cmFpbGluZy1zcGFjZXMnOiBmYWxzZSxcbiAgICAgICdmaXJzdC1saW5lLWhlYWRpbmcnOiBmYWxzZSxcbiAgICB9LFxuICAgIGN1c3RvbVJ1bGVzOiBbbXVzdEJlZ2luV2l0aE9zc0hlYWRlcl0sXG4gICAgc3RyaW5nczoge1JFQURNRV90ZW1wbGF0ZTogb3B0aW9ucy50ZW1wbGF0ZUNvbnRlbnRzfSxcbiAgfTtcbiAgY29uc3QgbGludFJlc3VsdHM6IG1hcmtkb3dubGludC5MaW50UmVzdWx0cyA9XG4gICAgbWFya2Rvd25saW50LnN5bmMobWFya2Rvd25MaW50T3B0aW9ucyk7XG4gIGNvbnNvbGUubG9nKGBMSU5UIFJFU1VMVFM6ICR7SlNPTi5zdHJpbmdpZnkobGludFJlc3VsdHMsIG51bGwsIDIpfWApO1xuICBjb25zdCBsaW50RXJyb3JzOiBBcnJheTxtYXJrZG93bmxpbnQuTGludEVycm9yPiA9XG4gICAgbGludFJlc3VsdHNbJ1JFQURNRV90ZW1wbGF0ZSddO1xuICBpZiAobGludEVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFJFQURNRSB0ZW1wbGF0ZSBkb2VzIG5vdCBjb25mb3JtIHRvIE1vbWVudG8gT1NTIHJlcXVpcmVtZW50czpcXG4ke2xpbnRFcnJvcnNcbiAgICAgICAgLm1hcChsZSA9PiBKU09OLnN0cmluZ2lmeShsZSkpXG4gICAgICAgIC5qb2luKCdcXG4nKX1gXG4gICAgKTtcbiAgfVxuXG4gIC8vIFRPRE86IHJlbmRlclxuICBjb25zdCBvc3NIZWFkZXIgPSBPU1NfUkVBRE1FX0hFQURFUl9URU1QTEFURTtcblxuICBudW5qdWNrcy5jb25maWd1cmUoe2F1dG9lc2NhcGU6IGZhbHNlfSk7XG4gIGNvbnN0IHRlbXBsYXRlQ29udGV4dDogUmVhZG1lVGVtcGxhdGVDb250ZXh0ID0ge1xuICAgIG9zc0hlYWRlcjogb3NzSGVhZGVyLFxuICB9O1xuICByZXR1cm4gbnVuanVja3MucmVuZGVyU3RyaW5nKG9wdGlvbnMudGVtcGxhdGVDb250ZW50cywgdGVtcGxhdGVDb250ZXh0KTtcbn1cbiJdfQ==