"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateReadmeStringFromTemplateString = exports.generateReadmeFileFromTemplateFile = void 0;
const nunjucks = require("nunjucks");
const fs = require("fs");
const markdownlint = require("markdownlint");
const rule_must_begin_with_oss_header_1 = require("./markdownlint-rules/rule-must-begin-with-oss-header");
function generateReadmeFileFromTemplateFile(options) {
    const templateContents = fs.readFileSync(options.templateFile).toString();
    const outputContents = generateReadmeStringFromTemplateString({
        templateContents: templateContents,
        projectStatus: options.projectStatus,
        projectStability: options.projectStability,
    });
    fs.writeFileSync(options.outputFile, outputContents);
}
exports.generateReadmeFileFromTemplateFile = generateReadmeFileFromTemplateFile;
const OSS_README_HEADER_TEMPLATE = `<img src="https://docs.momentohq.com/img/logo.svg" alt="logo" width="400"/>

[![project status](https://momentohq.github.io/standards-and-practices/project-status-official.svg)](https://github.com/momentohq/standards-and-practices/momento-on-github.md)
[![project status](https://momentohq.github.io/standards-and-practices/project-status-official.svg)](https://github.com/momentohq/standards-and-practices/momento-on-github.md) 
`;
function generateReadmeStringFromTemplateString(options) {
    // markdownlint.
    // const customMarkdownLintRule: markdownlint.Rule = {
    //   names: ['awesome-custom-rule'],
    //   description: 'content must be awesome',
    //   tags: ['momento-oss'],
    //   function: (params, onError) => {
    //     console.log(`IN CUSTOM MARKDOWNLINT RULE; params.name: ${params.name}`);
    //     for (const token of params.tokens) {
    //       console.log(`MARKDOWN TOKEN: ${JSON.stringify(token)}`);
    //     }
    //   },
    // };
    const markdownLintOptions = {
        config: {
            default: true,
            'no-trailing-spaces': false,
            'first-line-heading': false,
        },
        customRules: [rule_must_begin_with_oss_header_1.mustBeginWithOssHeader],
        strings: { README_template: options.templateContents },
    };
    const lintResults = markdownlint.sync(markdownLintOptions);
    console.log(`LINT RESULTS: ${JSON.stringify(lintResults, null, 2)}`);
    const lintErrors = lintResults['README_template'];
    if (lintErrors.length > 0) {
        throw new Error(`README template does not conform to Momento OSS requirements:\n${lintErrors
            .map(le => JSON.stringify(le))
            .join('\n')}`);
    }
    // TODO: render
    const ossHeader = OSS_README_HEADER_TEMPLATE;
    nunjucks.configure({ autoescape: false });
    const templateContext = {
        ossHeader: ossHeader,
    };
    return nunjucks.renderString(options.templateContents, templateContext);
}
exports.generateReadmeStringFromTemplateString = generateReadmeStringFromTemplateString;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZG1lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3JlYWRtZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBcUM7QUFDckMseUJBQXlCO0FBQ3pCLDZDQUE2QztBQUc3QywwR0FBNEY7QUFTNUYsU0FBZ0Isa0NBQWtDLENBQ2hELE9BQW1DO0lBRW5DLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDMUUsTUFBTSxjQUFjLEdBQUcsc0NBQXNDLENBQUM7UUFDNUQsZ0JBQWdCLEVBQUUsZ0JBQWdCO1FBQ2xDLGFBQWEsRUFBRSxPQUFPLENBQUMsYUFBYTtRQUNwQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsZ0JBQWdCO0tBQzNDLENBQUMsQ0FBQztJQUNILEVBQUUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQztBQUN2RCxDQUFDO0FBVkQsZ0ZBVUM7QUFhRCxNQUFNLDBCQUEwQixHQUFHOzs7O0NBSWxDLENBQUM7QUFNRixTQUFnQixzQ0FBc0MsQ0FDcEQsT0FBcUM7SUFFckMsZ0JBQWdCO0lBQ2hCLHNEQUFzRDtJQUN0RCxvQ0FBb0M7SUFDcEMsNENBQTRDO0lBQzVDLDJCQUEyQjtJQUMzQixxQ0FBcUM7SUFDckMsK0VBQStFO0lBQy9FLDJDQUEyQztJQUMzQyxpRUFBaUU7SUFDakUsUUFBUTtJQUNSLE9BQU87SUFDUCxLQUFLO0lBQ0wsTUFBTSxtQkFBbUIsR0FBd0I7UUFDL0MsTUFBTSxFQUFFO1lBQ04sT0FBTyxFQUFFLElBQUk7WUFDYixvQkFBb0IsRUFBRSxLQUFLO1lBQzNCLG9CQUFvQixFQUFFLEtBQUs7U0FDNUI7UUFDRCxXQUFXLEVBQUUsQ0FBQyx3REFBc0IsQ0FBQztRQUNyQyxPQUFPLEVBQUUsRUFBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLGdCQUFnQixFQUFDO0tBQ3JELENBQUM7SUFDRixNQUFNLFdBQVcsR0FDZixZQUFZLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDekMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNyRSxNQUFNLFVBQVUsR0FDZCxXQUFXLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNqQyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQ2Isa0VBQWtFLFVBQVU7YUFDekUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FDaEIsQ0FBQztLQUNIO0lBRUQsZUFBZTtJQUNmLE1BQU0sU0FBUyxHQUFHLDBCQUEwQixDQUFDO0lBRTdDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBQyxVQUFVLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztJQUN4QyxNQUFNLGVBQWUsR0FBMEI7UUFDN0MsU0FBUyxFQUFFLFNBQVM7S0FDckIsQ0FBQztJQUNGLE9BQU8sUUFBUSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFDMUUsQ0FBQztBQTdDRCx3RkE2Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBudW5qdWNrcyBmcm9tICdudW5qdWNrcyc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBtYXJrZG93bmxpbnQgZnJvbSAnbWFya2Rvd25saW50JztcbmltcG9ydCB7TGludFJlc3VsdHMsIE9wdGlvbnMgYXMgTWFya2Rvd25MaW50T3B0aW9uc30gZnJvbSAnbWFya2Rvd25saW50JztcbmltcG9ydCB7UHJvamVjdFN0YWJpbGl0eSwgUHJvamVjdFN0YXR1c30gZnJvbSAnLi9pbnB1dHMnO1xuaW1wb3J0IHttdXN0QmVnaW5XaXRoT3NzSGVhZGVyfSBmcm9tICcuL21hcmtkb3dubGludC1ydWxlcy9ydWxlLW11c3QtYmVnaW4td2l0aC1vc3MtaGVhZGVyJztcblxuZXhwb3J0IGludGVyZmFjZSBSZWFkbWVGaWxlR2VuZXJhdG9yT3B0aW9ucyB7XG4gIHRlbXBsYXRlRmlsZTogc3RyaW5nO1xuICBvdXRwdXRGaWxlOiBzdHJpbmc7XG4gIHByb2plY3RTdGF0dXM6IFByb2plY3RTdGF0dXM7XG4gIHByb2plY3RTdGFiaWxpdHk6IFByb2plY3RTdGFiaWxpdHk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVJlYWRtZUZpbGVGcm9tVGVtcGxhdGVGaWxlKFxuICBvcHRpb25zOiBSZWFkbWVGaWxlR2VuZXJhdG9yT3B0aW9uc1xuKTogdm9pZCB7XG4gIGNvbnN0IHRlbXBsYXRlQ29udGVudHMgPSBmcy5yZWFkRmlsZVN5bmMob3B0aW9ucy50ZW1wbGF0ZUZpbGUpLnRvU3RyaW5nKCk7XG4gIGNvbnN0IG91dHB1dENvbnRlbnRzID0gZ2VuZXJhdGVSZWFkbWVTdHJpbmdGcm9tVGVtcGxhdGVTdHJpbmcoe1xuICAgIHRlbXBsYXRlQ29udGVudHM6IHRlbXBsYXRlQ29udGVudHMsXG4gICAgcHJvamVjdFN0YXR1czogb3B0aW9ucy5wcm9qZWN0U3RhdHVzLFxuICAgIHByb2plY3RTdGFiaWxpdHk6IG9wdGlvbnMucHJvamVjdFN0YWJpbGl0eSxcbiAgfSk7XG4gIGZzLndyaXRlRmlsZVN5bmMob3B0aW9ucy5vdXRwdXRGaWxlLCBvdXRwdXRDb250ZW50cyk7XG59XG5cbmludGVyZmFjZSBSZWFkbWVTdHJpbmdHZW5lcmF0b3JPcHRpb25zIHtcbiAgdGVtcGxhdGVDb250ZW50czogc3RyaW5nO1xuICBwcm9qZWN0U3RhdHVzOiBQcm9qZWN0U3RhdHVzO1xuICBwcm9qZWN0U3RhYmlsaXR5OiBQcm9qZWN0U3RhYmlsaXR5O1xufVxuXG5pbnRlcmZhY2UgSGVhZGVyVGVtcGxhdGVDb250ZXh0IHtcbiAgcHJvamVjdFN0YXR1czogc3RyaW5nO1xuICBwcm9qZWN0U3RhYmlsaXR5OiBzdHJpbmc7XG59XG5cbmNvbnN0IE9TU19SRUFETUVfSEVBREVSX1RFTVBMQVRFID0gYDxpbWcgc3JjPVwiaHR0cHM6Ly9kb2NzLm1vbWVudG9ocS5jb20vaW1nL2xvZ28uc3ZnXCIgYWx0PVwibG9nb1wiIHdpZHRoPVwiNDAwXCIvPlxuXG5bIVtwcm9qZWN0IHN0YXR1c10oaHR0cHM6Ly9tb21lbnRvaHEuZ2l0aHViLmlvL3N0YW5kYXJkcy1hbmQtcHJhY3RpY2VzL3Byb2plY3Qtc3RhdHVzLW9mZmljaWFsLnN2ZyldKGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnRvaHEvc3RhbmRhcmRzLWFuZC1wcmFjdGljZXMvbW9tZW50by1vbi1naXRodWIubWQpXG5bIVtwcm9qZWN0IHN0YXR1c10oaHR0cHM6Ly9tb21lbnRvaHEuZ2l0aHViLmlvL3N0YW5kYXJkcy1hbmQtcHJhY3RpY2VzL3Byb2plY3Qtc3RhdHVzLW9mZmljaWFsLnN2ZyldKGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnRvaHEvc3RhbmRhcmRzLWFuZC1wcmFjdGljZXMvbW9tZW50by1vbi1naXRodWIubWQpIFxuYDtcblxuaW50ZXJmYWNlIFJlYWRtZVRlbXBsYXRlQ29udGV4dCB7XG4gIG9zc0hlYWRlcjogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVSZWFkbWVTdHJpbmdGcm9tVGVtcGxhdGVTdHJpbmcoXG4gIG9wdGlvbnM6IFJlYWRtZVN0cmluZ0dlbmVyYXRvck9wdGlvbnNcbik6IHN0cmluZyB7XG4gIC8vIG1hcmtkb3dubGludC5cbiAgLy8gY29uc3QgY3VzdG9tTWFya2Rvd25MaW50UnVsZTogbWFya2Rvd25saW50LlJ1bGUgPSB7XG4gIC8vICAgbmFtZXM6IFsnYXdlc29tZS1jdXN0b20tcnVsZSddLFxuICAvLyAgIGRlc2NyaXB0aW9uOiAnY29udGVudCBtdXN0IGJlIGF3ZXNvbWUnLFxuICAvLyAgIHRhZ3M6IFsnbW9tZW50by1vc3MnXSxcbiAgLy8gICBmdW5jdGlvbjogKHBhcmFtcywgb25FcnJvcikgPT4ge1xuICAvLyAgICAgY29uc29sZS5sb2coYElOIENVU1RPTSBNQVJLRE9XTkxJTlQgUlVMRTsgcGFyYW1zLm5hbWU6ICR7cGFyYW1zLm5hbWV9YCk7XG4gIC8vICAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHBhcmFtcy50b2tlbnMpIHtcbiAgLy8gICAgICAgY29uc29sZS5sb2coYE1BUktET1dOIFRPS0VOOiAke0pTT04uc3RyaW5naWZ5KHRva2VuKX1gKTtcbiAgLy8gICAgIH1cbiAgLy8gICB9LFxuICAvLyB9O1xuICBjb25zdCBtYXJrZG93bkxpbnRPcHRpb25zOiBNYXJrZG93bkxpbnRPcHRpb25zID0ge1xuICAgIGNvbmZpZzoge1xuICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICduby10cmFpbGluZy1zcGFjZXMnOiBmYWxzZSxcbiAgICAgICdmaXJzdC1saW5lLWhlYWRpbmcnOiBmYWxzZSxcbiAgICB9LFxuICAgIGN1c3RvbVJ1bGVzOiBbbXVzdEJlZ2luV2l0aE9zc0hlYWRlcl0sXG4gICAgc3RyaW5nczoge1JFQURNRV90ZW1wbGF0ZTogb3B0aW9ucy50ZW1wbGF0ZUNvbnRlbnRzfSxcbiAgfTtcbiAgY29uc3QgbGludFJlc3VsdHM6IG1hcmtkb3dubGludC5MaW50UmVzdWx0cyA9XG4gICAgbWFya2Rvd25saW50LnN5bmMobWFya2Rvd25MaW50T3B0aW9ucyk7XG4gIGNvbnNvbGUubG9nKGBMSU5UIFJFU1VMVFM6ICR7SlNPTi5zdHJpbmdpZnkobGludFJlc3VsdHMsIG51bGwsIDIpfWApO1xuICBjb25zdCBsaW50RXJyb3JzOiBBcnJheTxtYXJrZG93bmxpbnQuTGludEVycm9yPiA9XG4gICAgbGludFJlc3VsdHNbJ1JFQURNRV90ZW1wbGF0ZSddO1xuICBpZiAobGludEVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFJFQURNRSB0ZW1wbGF0ZSBkb2VzIG5vdCBjb25mb3JtIHRvIE1vbWVudG8gT1NTIHJlcXVpcmVtZW50czpcXG4ke2xpbnRFcnJvcnNcbiAgICAgICAgLm1hcChsZSA9PiBKU09OLnN0cmluZ2lmeShsZSkpXG4gICAgICAgIC5qb2luKCdcXG4nKX1gXG4gICAgKTtcbiAgfVxuXG4gIC8vIFRPRE86IHJlbmRlclxuICBjb25zdCBvc3NIZWFkZXIgPSBPU1NfUkVBRE1FX0hFQURFUl9URU1QTEFURTtcblxuICBudW5qdWNrcy5jb25maWd1cmUoe2F1dG9lc2NhcGU6IGZhbHNlfSk7XG4gIGNvbnN0IHRlbXBsYXRlQ29udGV4dDogUmVhZG1lVGVtcGxhdGVDb250ZXh0ID0ge1xuICAgIG9zc0hlYWRlcjogb3NzSGVhZGVyLFxuICB9O1xuICByZXR1cm4gbnVuanVja3MucmVuZGVyU3RyaW5nKG9wdGlvbnMudGVtcGxhdGVDb250ZW50cywgdGVtcGxhdGVDb250ZXh0KTtcbn1cbiJdfQ==